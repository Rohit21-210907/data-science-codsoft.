# Movie Rating Prediction using Linear Regression

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import mean_squared_error, r2_score

# Load dataset
df = pd.read_csv("movies.csv")  # Make sure movies.csv is in your working directory
print("Dataset Preview:")
print(df.head())

# Drop rows with missing target values
df.dropna(subset=['Rating'], inplace=True)

# Fill missing values in features (if any)
df.fillna({
    'Genre': 'Unknown',
    'Director': 'Unknown',
    'Cast': 'Unknown',
    'Budget': df['Budget'].median(),
    'Revenue': df['Revenue'].median(),
    'Runtime': df['Runtime'].median()
}, inplace=True)

# Encode categorical variables
le_genre = LabelEncoder()
df['Genre'] = le_genre.fit_transform(df['Genre'].astype(str))

le_director = LabelEncoder()
df['Director'] = le_director.fit_transform(df['Director'].astype(str))

le_cast = LabelEncoder()
df['Cast'] = le_cast.fit_transform(df['Cast'].astype(str))

# Select features and target
features = ['Genre', 'Director', 'Cast', 'Budget', 'Revenue', 'Runtime']
X = df[features]
y = df['Rating']

# Split dataset into training and testing
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

# Initialize and train model
model = LinearRegression()
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Evaluate the model
print("\nModel Evaluation:")
print("R^2 Score:", r2_score(y_test, y_pred))
print("Root Mean Squared Error:", np.sqrt(mean_squared_error(y_test, y_pred)))

# Plot Actual vs Predicted ratings
plt.figure(figsize=(8,6))
sns.scatterplot(x=y_test, y=y_pred)
plt.xlabel("Actual Ratings")
plt.ylabel("Predicted Ratings")
plt.title("Actual vs Predicted Movie Ratings")
plt.show()
