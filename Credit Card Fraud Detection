import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

# Load data
df = pd.read_csv('creditcard.csv')
print("Dataset loaded:", df.shape)

# Check for missing values
print("Missing values:", df.isnull().sum().sum())

# Distribution of the classes
print("Class distribution:\n", df['Class'].value_counts())

# Visualize class imbalance
sns.countplot(data=df, x='Class')
plt.title("Class Distribution")
plt.show()

# Separate features and target
X = df.drop('Class', axis=1)
y = df['Class']

# Scale 'Amount' and 'Time'
scaler = StandardScaler()
X[['scaled_amount', 'scaled_time']] = scaler.fit_transform(X[['Amount', 'Time']])
X.drop(['Amount', 'Time'], axis=1, inplace=True)

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y, random_state=42)

# Logistic Regression
model = LogisticRegression(max_iter=1000)
model.fit(X_train, y_train)

# Predictions
y_pred = model.predict(X_test)

# Evaluation
print("\nConfusion Matrix:")
print(confusion_matrix(y_test, y_pred))

print("\nClassification Report:")
print(classification_report(y_test, y_pred))

print("Accuracy Score:", accuracy_score(y_test, y_pred))
